---
# The following secrets are required to push the images.
# DOCKERHUB_USERNAME
# DOCKERHUB_TOKEN
# CR_PAT
# QUAY_USERNAME
# QUAY_TOKEN
# The quay repository needs to be created first using the web interface and the
# robot needs to be given write access to it before pushing to it.
name: ci

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  pull_request:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'LS'
      - 'VERSION'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
        
      - name: Remove docker from the repo name
        run: echo "repo_name=$(echo "${{ github.event.repository.name }}" | sed 's/[^-]*-//')" >> $GITHUB_ENV

      - name: Get current date
        run: echo "date=$(date -u +%Y-%m-%dT%H%M%SZ)" >> $GITHUB_ENV
        
      - name: Checkout
        uses: actions/checkout@v2.3.4
        
       # Define if tests and push should be run against which versions/platforms
      - name: Prepare
        id: prep
        run: |
          VERSION=$(cat ./VERSION)
          echo ::set-output name=version::${VERSION}
          CHECKSUM=$(cat ./CHECKSUM)
          echo ::set-output name=checksum::${CHECKSUM}
          LS=$(cat ./LS)
          echo ::set-output name=ls::${LS}
          if test -f "./goss.yaml"; then
            echo ::set-output name=goss::true
          else
            echo ::set-output name=goss::false
          fi
          if [ "${{github.event_name}}" == "pull_request" ]; then
            echo ::set-output name=push::false
          else
            echo ::set-output name=push::true
          fi
      
      - name: Get tag
        run: echo "tag=${{ steps.prep.outputs.version }}-ls${{ steps.prep.outputs.ls }}" >> $GITHUB_ENV
        
      - name: Check if tag already exists
        uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with: 
          tag: ${{ env.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if tag already exists
        run: |
          if ${{ steps.checkTag.outputs.exists }} == true; then
            echo "${{ steps.prep.outputs.version }}-ls${{ steps.prep.outputs.ls }}"
            exit 1
          fi
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.1.0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.3.0
        with:
          driver-opts: image=moby/buildkit:master
      -
        name: Cache Docker layers
        uses: actions/cache@v2.1.5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Install the GOSS testing framework
      - name: Set up goss/dgoss
        uses: e1himself/goss-installation-action@v1.0.3
        if: ${{ steps.prep.outputs.goss == 'true' }}
        with:
          version: 'v0.3.16'
          
      # Creates a local build to run tests on
      - name: Build and Load local test-container
        uses: docker/build-push-action@v2
        if: ${{ steps.prep.outputs.goss == 'true' }}
        with:
          build-args: |
            VERSION=${{ steps.prep.outputs.version }}
            CHECKSUM=${{ steps.prep.outputs.checksum }}
          context: .
          file: ./Dockerfile
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.repo_name }}:test

      # Run GOSS tests if included with the container
      - name: Run GOSS tests
        if: ${{ steps.prep.outputs.goss == 'true' }}
        env:
          GOSS_FILE: ./goss.yaml
        run: |
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ env.repo_name }}:test

      - name: Login to DockerHub
        uses: docker/login-action@v1.9.0
        if: github.event_name != 'pull_request' && ${{ steps.checkTag.outputs.exists == 'true' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.9.0
        if: github.event_name != 'pull_request' && ${{ steps.checkTag.outputs.exists == 'true' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to Quay Registry
        uses: docker/login-action@v1.9.0
        if: github.event_name != 'pull_request' && ${{ steps.checkTag.outputs.exists == 'true' }}
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2.4.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          build-args: |
            BUILD_DATE=${{ env.date }}
            VERSION=${{ steps.prep.outputs.version }}
            CHECKSUM=${{ steps.prep.outputs.checksum }}
          tags: |
            ${{ github.repository_owner }}/${{ env.repo_name }}:latest
            ${{ github.repository_owner }}/${{ env.repo_name }}:${{ env.tag }}
            ghcr.io/${{ github.repository_owner }}/${{ env.repo_name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.repo_name }}:${{ env.tag }}
            quay.io/${{ github.repository_owner }}/${{ env.repo_name }}:latest
            quay.io/${{ github.repository_owner }}/${{ env.repo_name }}:${{ env.tag }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.tag }}
          release_name: ${{ env.tag }}
          draft: false
          prerelease: false

